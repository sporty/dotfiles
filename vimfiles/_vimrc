" vi:set sts=2 sw=2 tw=0:
"
" vim向けの設定(gvim向けは_gvimrcに記述すること)
"
"

" Liuxのみ香り屋版を使用しないので、Bram氏の設定例を読み込み
"===============================================================================
if has('unix')
  let uname = system('uname')

  if uname =~? "linux"
	source $VIMRUNTIME/vimrc_example.vim
  endif
endif


" 一般的な設定
"===============================================================================

" ファイル関連
"---------------------------------------------------------------------------

" スワップファイルを作らない
set noswapfile

" 表示関連
"---------------------------------------------------------------------------

" 行番号
set number

" タブの幅
"---------------------------------------------------------------------------

" タブストップ（タブの文字数）
set ts=4
" シフトワイズ（オートインデントの文字数）
set sw=4
set softtabstop=4 
" オートインデント
set autoindent

" 検索に関するオプション
"---------------------------------------------------------------------------

set ignorecase
set smartcase

" ビープ音を消す 
" vbはビジュアルベルを使用するというオプション。t_vbはキー
"--------------------------------------------------------------------------- 

set vb t_vb= 

" クリップボードを*レジスタに自動割り当て
"--------------------------------------------------------------------------- 

set clipboard=unnamed,autoselect

" 印刷設定（行番号を表示）
"--------------------------------------------------------------------------- 

set printoptions=number:y

" フォールドメソッド
"---------------------------------------------------------------------------

set fdm=marker

" モードライン
"---------------------------------------------------------------------------

set modeline

" キーバインド
"---------------------------------------------------------------------------

" ハイライト表示をオフ
noremap <silent> <ESC><ESC> :nohl<CR>
" ウインドウ移動を簡素化
noremap <silent> <C-H> <C-W>h
noremap <silent> <C-J> <C-W>j
noremap <silent> <C-K> <C-W>k
noremap <silent> <C-L> <C-W>l

" QuickFix
"---------------------------------------------------------------------------

" ;nでQuickFixを開く
noremap <silent> ;n :copen<CR>
" ;NでLocationListを開く
noremap <silent> ;N :lopen<CR>
" ESC２回で閉じる
au FileType qf :nnoremap <silent> <buffer> <ESC><ESC> :q<CR>
" make後に自動でQuickFixを開く syntasticが正しく動作しないのでダメ！
"au QuickfixCmdPost * copen

" help
"---------------------------------------------------------------------------

" ESCキー２回でヘルプを閉じる
au FileType help nnoremap <silent> <buffer> <ESC><ESC> :q<CR>
au FileType help inoremap <silent> <buffer> <ESC><ESC> <ESC>:q<CR>

" 色
"---------------------------------------------------------------------------

" 画面のカラースキームを変更する 
set t_Co=256
colorscheme koehler

" ファイルタイプ
"---------------------------------------------------------------------------

augroup filetypedetect
  " pig
  au BufNewFile,BufRead *.pig set filetype=pig syntax=pig
augroup END


" プラグインの設定
"===============================================================================

" 自分のプラグイン。まだ何も無い。
"---------------------------------------------------------------------------

set rtp+=~/vimfiles/myplugin/

" vundle
"---------------------------------------------------------------------------

set nocompatible
filetype off

set rtp+=~/vimfiles/vundle.git/
call vundle#rc()

" unite関連
Bundle 'http://github.com/Shougo/unite.vim.git'
Bundle 'http://github.com/Shougo/unite-outline.git'
Bundle 'http://github.com/thinca/vim-ref.git'
Bundle 'http://github.com/Shougo/vimfiler.git'
"Bundle 'http://github.com/Shougo/neocomplcache.git'

" snippet
Bundle 'http://github.com/Shougo/neosnippet.git'
Bundle 'http://github.com/honza/vim-snippets.git'

" ColorScheme
"Bundle 'http://github.com/altercation/vim-colors-solarized.git'
Bundle 'http://github.com/sporty/molokai.git'

" syntax
Bundle 'http://github.com/groenewege/vim-less.git'
Bundle 'http://github.com/tpope/vim-markdown.git'
Bundle "http://github.com/vim-scripts/pig.vim.git"
Bundle "http://github.com/PProvost/vim-ps1.git"

" python
Bundle 'http://github.com/klen/python-mode.git'
Bundle 'http://github.com/davidhalter/jedi-vim.git'

" html
Bundle 'http://github.com/mattn/zencoding-vim.git'

" javascript
Bundle 'http://github.com/jelera/vim-javascript-syntax.git'
Bundle 'http://github.com/pangloss/vim-javascript.git'

" ruby
Bundle 'http://github.com/tpope/vim-rails.git'

" syntax checker
Bundle 'http://github.com/scrooloose/syntastic.git'

" other
Bundle 'http://github.com/tpope/vim-surround.git'
Bundle 'http://github.com/scrooloose/nerdtree.git'
Bundle 'http://github.com/kien/ctrlp.vim.git'
Bundle 'http://github.com/Lokaltog/vim-powerline.git'
"Bundle 'http://github.com/Lokaltog/powerline.git', {'rtp': 'powerline/bindings/vim/'}

"Bundle 'http://github.com/thinca/vim-quickrun.git'

filetype plugin indent on 

" unite
"---------------------------------------------------------------------------

" バッファとファイル履歴
noremap <silent> ;u :Unite buffer file_mru<CR>
" アウトライン
noremap <silent> ;l :Unite outline<CR>
" neocomplcacheのスニペット
noremap <silent> ;s :Unite snippet<CR>
" VimFiler起動
noremap <silent> ;f :VimFiler<CR>

" ESCキー２回で終了
au FileType unite nnoremap <silent> <buffer> <ESC><ESC> :q<CR>
au FileType unite inoremap <silent> <buffer> <ESC><ESC> <ESC>:q<CR>
au FileType vimfiler nnoremap <silent> <buffer> <ESC><ESC> :e#<CR>
au FileType vimfiler inoremap <silent> <buffer> <ESC><ESC> <ESC>:e#<CR>


" neocomplcache
"---------------------------------------------------------------------------

if 0
" 有効化
let g:neocomplcache_enable_at_startup = 1
" 自動補完を無効化
"let g:neocomplcache_disable_auto_complete = 1

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
"autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
endif

" neosnippet
"---------------------------------------------------------------------------

" キーバインド
imap <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)
" snippetファイル
" ~/.vim/bundle/vim-snippets/snippets は参考
let g:neosnippet#snippets_directory = '~/vimfiles/snippets'
" ランタイムディレクトリのスニペットをすべて無効化
let g:neosnippet#disable_runtime_snippets = {'_': 1}

" ref.vim
"---------------------------------------------------------------------------

" リファレンス検索
autocmd FileType python nmap ;r :<C-u>Ref pydoc<Space>
autocmd FileType php nmap ;r :<C-u>Ref phpmanual<Space>

" 英和辞典
nmap ;e :<C-u>Ref alc<Space>
"let g:ref_alc_start_linenumber = 39 " 表示する行数
"let g:ref_alc_encoding = 'Shift-JIS' " 文字化けするならここで文字コードを指定してみる

" ESC２回で閉じる
au FileType ref-pydoc nnoremap <silent> <buffer> <ESC><ESC> :q<CR>
au FileType ref-phpmanual nnoremap <silent> <buffer> <ESC><ESC> :q<CR>
au FileType ref-alc nnoremap <silent> <buffer> <ESC><ESC> :q<CR>

" php
let g:ref_phpmanual_path = $HOME.'/Documents/references/php-chunked-xhtml/'
let g:ref_phpmanual_cmd = 'w3m -dump %s'


" カラースキーム
"===============================================================================

" solarized
"let g:solarized_termtrans=1
"set background=dark
"colorscheme solarized

let g:molokai_original=0
colorscheme molokai


" NERDtreeの設定
"===============================================================================

" 基本設定
"---------------------------------------------------------------------------

" 非表示ファイル
let g:NERDTreeIgnore=['\.py[co]$', '\.swp$', '\.bak$', '\~$']
" 起動時にNERDTreeを開く
let file_name = expand("%:p")
if has('vim_starting') && file_name == ''
    autocmd VimEnter * execute 'NERDTree ./'
endif
" 終了時NERDTreeバッファのみの場合は自動で閉じる
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

" キーバインド
"---------------------------------------------------------------------------

" ESC２回で閉じる
au FileType nerdtree :nnoremap <silent> <buffer> <ESC><ESC> :NERDTreeClose<CR>
" F3で表示切り替え
noremap <silent> <F3> :NERDTreeToggle<CR>


" Pythonの設定
"===============================================================================

" タブをスペースに自動変換
"---------------------------------------------------------------------------

autocmd FileType python :setlocal expandtab

" QuickFix関連
"---------------------------------------------------------------------------

" makeをpythonコマンドにしてエラーフォーマットを定義しておく
autocmd FileType python :setlocal makeprg=python\ %
autocmd FileType python :setlocal errorformat=%C\ %.%#,%A\ \ File\ \"%f\"\\,\ line\ %l%.%#,%Z%[%^\ ]%\\@=%m

" python-mode の設定
"---------------------------------------------------------------------------

" Load pylint code plugin
let g:pymode_lint = 0
" Check code every save
let g:pymode_lint_write = 0
" Maximum allowed mccabe complexity
let g:pymode_lint_mccabe_complexity = 8
" Enable python folding
let g:pymode_folding = 0
" Autoremove unused whitespaces
let g:pymode_utils_whitespaces = 0
" Additional python paths (Mayaのパス等追加)
let g:pymode_paths = []
" Enable pymode indentation
let g:pymode_indent = 1

" jedi の設定
"---------------------------------------------------------------------------

" プレビューを出さない
autocmd FileType python setlocal completeopt-=preview
" 関数リファレンスを表示しない
let g:jedi#show_function_definition = 0

" キーバインド
"---------------------------------------------------------------------------

let g:pymode_run_key = '<F8>'

" djangoのtagsを追加
"autocmd FileType python :setlocal tags+=C:/Python25/Lib/site-packages/django/tags


" シンタックスチェック
"===============================================================================

" syntasticの設定
"---------------------------------------------------------------------------
let g:syntastic_mode_map = { 'mode': 'passive',
	  \						 'active_filetypes': [],
	  \						 'passive_filetypes': ['javascript', 'python'] }
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 0

let g:syntastic_javascript_checkers = ['jshint', 'gjslint']
"let g:syntastic_javascript_closure_compiler_path = '~/compiler.jar'
"let g:syntastic_javascript_closure_compiler_options = ''

let g:syntastic_python_checkers = ['flake8']
"let g:syntastic_python_checkers = ['flake8', 'py3kwarn']

" キーバインド
"---------------------------------------------------------------------------
noremap <silent> <F7> :SyntasticCheck<CR>


" PHPの設定
"===============================================================================

" タブをスペースに自動変換
"---------------------------------------------------------------------------

autocmd FileType php :setlocal expandtab

" QuickFix関連
"---------------------------------------------------------------------------

" makeをphpコマンドにして文法エラーを発見する
"autocmd FileType php :setlocal makeprg=php\ -|\ %
"autocmd FileType php :setlocal errorformat=%m\ in\ %f\ on\ line\ %l


" Rubyの設定
"===============================================================================

" タブを2タブにして、スペースに自動変換
"---------------------------------------------------------------------------

au FileType ruby :setlocal ts=2
au FileType ruby :setlocal sw=2
au FileType ruby :setlocal softtabstop=2
au FileType ruby :setlocal expandtab


" JavaScriptの設定
"===============================================================================

" タブをスペースに自動変換
"---------------------------------------------------------------------------
au FileType javascript :setlocal expandtab


" QuickFix関連
"---------------------------------------------------------------------------

"autocmd FileType ruby :setlocal makeprg=ruby\ %
"autocmd FileType ruby :setlocal errorformat=%C\ %.%#,%A\ \ File\ \"%f\"\\,\ line\ %l%.%#,%Z%[%^\ ]%\\@=%m


" その他ファイル毎の設定
"===============================================================================

autocmd FileType xml :setlocal nowrap


" タグファイル
"===============================================================================

" タグファイルの自動指定
"---------------------------------------------------------------------------

" ＭａｙａＳＤＫ。インクルードファイルから作成
"autocmd FileType cpp,h :set tags+=~/.vim/tags/maya.tags

" 再帰的に上位ディレクトリのtagsを検索
"set tags+=tags;


" 辞書ファイル
"===============================================================================

" ＰＨＰ
"autocmd FileType php :setlocal dictionary=~/.vim/dict/php.dict


" EOF

snippet     class
abbr        class Class(...): ...
prev_word   '^'
	class ${1:name}(${2:object}):
		u"""
		${3:class documentation}
		"""

		def __init__(self${4:, *args, **kwargs}):
			u"""
			${5:__init__ documentation}
            @param ${6:args}
			"""
			${7:pass}

snippet     def
abbr        def function(...): ...
prev_word   '^'
	def ${1:name}(${2:*arg, **kwargs}):
		u"""
		${3:documentation}
		@param ${4:args}
		@return ${5:result}
		"""

		${6:pass}

snippet     defm
abbr        def method(self, ...): ...
prev_word   '^'
	def ${1:name}(self${2:, *args, **kwargs}):
		u"""
		${3:documentation}
		@param ${4:args}
		@return ${5:result}
		"""

		${6:pass}

snippet     elif
abbr        elif ...: ...
prev_word   '^'
	elif ${1:condition}:
		${2:pass}

snippet     else
abbr        else: ...
prev_word   '^'
	else:
		${1:pass}

snippet     withfile
abbr        with file(...) as fp: ...
prev_word   '^'
	with file(${1:filename}, "${2:mode}") as fp:
		lines = fp.readlines()

snippet     for
abbr        for ... in ...: ...
prev_word   '^'
	for ${1:value} in ${2:list}:
		${3:pass}

snippet     if
abbr        if ...: ...
prev_word   '^'
	if ${1:condition}:
		${2:pass}

snippet     ifmain
abbr        if __name__ == '__main__': ...
prev_word   '^'
	if __name__ == '__main__':
		${1:pass}

snippet     tryexcept
abbr        try: ... except ...: ...
prev_word   '^'
	try:
		${1:pass}
	except ${2:ExceptionClass}:
		${3:pass}

snippet     tryfinally
abbr        try: ... finally: ...
prev_word   '^'
	try:
		${1:pass}
	finally:
		${2:pass}

snippet     while
abbr        while ...: ...
prev_word   '^'
	while ${1:condition}:
		${2:pass}


snippet     pp
abbr        pprint.PrettyPrinter(...
prev_word   '^'
    import pprint
    pp = pprint.PrettyPrinter(indent=4, stream=sys.stderr)

snippet     argparse
abbr        argparse.ArgumentParser(...
prev_word   '^'
    import argparse
    parser = argparse.ArgumentParser(description=u'${1:description}')
    parser.add_argument(
        '-${2:short_flag}', '--${3:long_flag}',
        dest='${4:var_name}',
        type=${5:str}, default=${6:None},
        metavar='${7:VALUE}',
        help=u'${8:description}'
        )
    args = parser.parse_args()

snippet     csv.reader
abbr        csv.reader(...
prev_word   '^'
    import csv
    csv_reader = csv.reader(${1:stream}, delimiter=',')
    labels = next(csv_reader)
    for row in csv_reader:
        ${2:pass}

snippet     csv.writer
abbr        csv.writer(...
prev_word   '^'
    import csv
    csv_writer = csv.writer(${1:stream}, delimiter=',')
    csv_writer.writerow(row)

snippet     get_method
abbr        get_method(...
prev_word   '^'
    import inspect
    def get_method(instance, method_name):
        for m in inspect.getmembers(instance):
            if m[0] == method_name:
                return m[1]
        return None

snippet     sorted
abbr        sorted(...
prev_word   '^'
    sorted(${1:listdata}, key=lambda ${2:member}: ${3:member.name()})

snippet     my_cache
abbr        set_cache(...
prev_word   '^'
    import datetime
    cache_db = {}
    def get_cache(key):
        if key in cache_db.keys():
            n = datetime.datetime.now()
            e = cache_db[key]["expire"]
            if n > e:
                del cache_db[key]
            else:
                return cache_db[key]["value"]
        return None
    def set_cache(key, value, expire=0):
        delta = datetime.timedelta(seconds=expire)
        expire_time = datetime.datetime.now() + delta
        cache_db[key] = {"expire": expire_time, "value": value}

snippet     timezone now
abbr        dateutil.tz.tzlocal(...
prev_word   '^'
    import dateutil.tz
    now = datetime.datetime.now(dateutil.tz.tzlocal())

snippet     timezone replace
abbr        tzinfo=dateutil.tz.tzlocal(...
prev_word   '^'
    import dateutil.tz
    now = now.replace(tzinfo=dateutil.tz.tzlocal())

snippet     print_function
abbr        import print_function
prev_word   '^'
    from __future__ import print_function

snippet     flatten
abbr        import itertools
prev_word   '^'
    import itertools
    itertools.chain.from_iterable(${1:stream})

snippet     mkstemp
abbr        tempfile.mkstemp()
prev_word   '^'
    import tempfile, os
    tup = tempfile.mkstemp()
    fp = os.fdopen(tup[0])

snippet     thisdir
abbr        thisdir()
prev_word   '^'
    def thisdir(filename):
        path = os.path.abspath(os.path.dirname(__file__))
        return os.path.normpath(os.path.join(path, filename))

snippet     chmod
abbr        os.chmod()
prev_word   '^'
    import os
    import stat
    os.chmod(${1:filename}, stat.S_IWRITE|stat.S_IREAD)

snippet     utime
abbr        os.utime()
prev_word   '^'
    import os
    import time
    atime = mtime = time.mktime((${1:year}, ${2:month}, ${3:day}, ${4:hour}, ${5:minite}, ${6:second}, 0, 0, -1))
    os.utime(${7:filename}, (atime, mtime))

snippet     walk
abbr        os.walk()
prev_word   '^'
    import os
    for root, dirs, files in os.walk(${1:dirname}):
        for name in files:
            print(os.path.join(root, name))

snippet     partial
    from functools import partial



snippet qt__import
abbr from PySide import QtGui...
prev_word '^'
	from PySide import QtGui, QtCore
	from PySide.QtUiTools import QUiLoader

snippet qt__dialog_open
abbr QtGui.QFileDialog.getOpenFileName...
prev_word '^'
	widget = self.findChild(QtCore.QObject, "${1:lineedit}")
	current_dir = os.path.dirname(widget.text())
	if os.path.isdir(current_dir):
		curent_dir = ""

	input_filename = QtGui.QFileDialog.getOpenFileName(self, dir=current_dir)[0]
	if input_filename:

snippet qt__dialog_save
abbr QtGui.QFileDialog.getSaveFileName...
prev_word '^'
	widget = self.findChild(QtCore.QObject, "${1:lineedit}")
	current_dir = os.path.dirname(widget.text())
	if os.path.isdir(current_dir):
		curent_dir = ""
	output_filename = QtGui.QFileDialog.getSaveFileName(self, dir=current_dir)[0]
	if output_filename:

snippet qt__dialog_dir
abbr QtGui.QFileDialog.getExistingDirectory...
prev_word '^'
	widget = self.findChild(QtCore.QObject, "${1:lineedit}")
	current_dir = widget.text()
	if os.path.isdir(current_dir):
		curent_dir = ""
	dirname = QtGui.QFileDialog.getExistingDirectory(self)

snippet qt__class_QDialog
abbr class Widget(QtGui.QDialog)
prev_word '^'
	import ui.weight_cache
	class ${1:name}(QtGui.QDialog):
		TITLE = ${3:title}
		def __init__(self, parent=None):
			super(${1:name}, self).__init__(parent)
			self.setAcceptDrops(True)
			self.setWindowTitle(self.TITLE)

			layout = QtGui.QVBoxLayout()
			form = ui.weight_cache.Ui_Form()
			form.setupUi(self)
			self.setLayout(layout)

			widget = self.findChild(QtCore.QObject, "ok")
			widget.clicked.connect(self.callback_execute)

			# 履歴ファイルを読み込み、一番新しい値でGUIの値を上書き
			self._history = jack.pyside_utility.ToolHistory(self.TITLE, "input_filename")
			self.set_params(self._history.get_params())

		def dragEnterEvent(self, e):
			e.accept()

		def dropEvent(self, e):
			text = e.mimeData().text()

		def contextMenuEvent(self, event):
			# 履歴ポップアップメニューの構築
			actions = self._history.get_actions(self, self.callback_action)
			if not actions:
				return

			menu = QtGui.QMenu(self)
			for action in actions:
				menu.addAction(action)
			menu.exec_(event.globalPos())

		def set_params(self, params):
			# GUIに値を入力
			pass

		def callback_action(self, params):
			self.set_params(params)

		def callback_execute(self):
			# 履歴に追加
			self._history.add_params({
				"input_filename": input_filename,
				"force": force,
			})

snippet qt__checkbox_set
abbr widget.setCheckState(...
prev_word '^'
	widget = self.findChild(QtCore.QObject, "${1:checkbox}")
	widget.setCheckState(
		QtCore.Qt.CheckState.Checked if ${2:value} else QtCore.Qt.CheckState.Unchecked)

snippet qt__checkbox_get
abbr value = widget.checkState()...
prev_word '^'
	widget = self.findChild(QtCore.QObject, "${1:checkbox}")
	${2:value} = widget.checkState() == QtCore.Qt.CheckState.Checked

snippet qt__text_set
abbr widget.setText(...
prev_word '^'
	widget = self.findChild(QtCore.QObject, "${1:edit}")
	widget.setText(${2:value})

snippet qt__text_get
abbr value = widget.text()...
prev_word '^'
	widget = self.findChild(QtCore.QObject, "${1:edit}")
	${2:value} = widget.text()

snippet qt__main__maya
abbr QtWidget().show()
prev_word '^'
	from maya import OpenMayaUI as omui
	from shiboken import wrapInstance

	def maya_main_window():
		mayaMainWindowPtr = omui.MQtUtil.mainWindow()
		return wrapInstance(long(mayaMainWindowPtr), QtGui.QWidget)

	def main():
		win = ${1:class}(maya_main_window())
		win.show()

snippet qt__main__app
abbr if __name__ == '__main__':app = QtGui.QApplication(sys.argv)
prev_word '^'
	def main():
		app = QtGui.QApplication(sys.argv)

		frame = ${1:class}()
		frame.show()

		app.exec_()
		sys.exit()

	if __name__ == '__main__':
		main()


snippet     class
abbr        class Class(...): ...
prev_word   '^'
	class ${1:name}(${2:object}):
		u"""
		${3:class documentation}
		"""

		def __init__(self${4:, *args, **kwargs}):
			u"""
			${5:__init__ documentation}
            @param ${6:args}
			"""
			${7:pass}

snippet     def
abbr        def function(...): ...
prev_word   '^'
	def ${1:name}(${2:*arg, **kwargs}):
		u"""
		${3:documentation}
		@param ${4:args}
		@return ${5:result}
		"""

		${6:pass}

snippet     defm
abbr        def method(self, ...): ...
prev_word   '^'
	def ${1:name}(self${2:, *args, **kwargs}):
		u"""
		${3:documentation}
		@param ${4:args}
		@return ${5:result}
		"""

		${6:pass}

snippet     elif
abbr        elif ...: ...
prev_word   '^'
	elif ${1:condition}:
		${2:pass}

snippet     else
abbr        else: ...
prev_word   '^'
	else:
		${1:pass}

snippet     withfile
abbr        with file(...) as fp: ...
prev_word   '^'
	with file(${1:filename}, "${2:mode}") as fp:
		lines = fp.readlines()

snippet     for
abbr        for ... in ...: ...
prev_word   '^'
	for ${1:value} in ${2:list}:
		${3:pass}

snippet     if
abbr        if ...: ...
prev_word   '^'
	if ${1:condition}:
		${2:pass}

snippet     ifmain
abbr        if __name__ == '__main__': ...
prev_word   '^'
	if __name__ == '__main__':
		${1:pass}

snippet     tryexcept
abbr        try: ... except ...: ...
prev_word   '^'
	try:
		${1:pass}
	except ${2:ExceptionClass}:
		${3:pass}

snippet     tryfinally
abbr        try: ... finally: ...
prev_word   '^'
	try:
		${1:pass}
	finally:
		${2:pass}

snippet     while
abbr        while ...: ...
prev_word   '^'
	while ${1:condition}:
		${2:pass}


snippet     pp
abbr        pprint.PrettyPrinter(...
prev_word   '^'
    import pprint
    pp = pprint.PrettyPrinter(indent=4, stream=sys.stderr)

snippet     argparse
abbr        argparse.ArgumentParser(...
prev_word   '^'
    import argparse
    parser = argparse.ArgumentParser(description=u'${1:description}')
    parser.add_argument(
        '-${2:short_flag}', '--${3:long_flag}',
        dest='${4:var_name}',
        type=${5:str}, default=${6:None},
        metavar='${7:VALUE}',
        help=u'${8:description}'
        )
    args = parser.parse_args()

snippet     csv.reader
abbr        csv.reader(...
prev_word   '^'
    import csv
    csv_reader = csv.reader(${1:stream}, delimiter=',')
    labels = next(csv_reader)
    for row in csv_reader:
        ${2:pass}

snippet     csv.writer
abbr        csv.writer(...
prev_word   '^'
    import csv
    csv_writer = csv.writer(${1:stream}, delimiter=',')
    csv_writer.writerow(row)



